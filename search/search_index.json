{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pipx \u2014 Install and Run Python Applications in Isolated Environments Documentation : https://pipxproject.github.io/pipx/ Source Code : https://github.com/pipxproject/pipx For comparison to other tools including pipsi, see Comparison to Other Tools . Install pipx python3 -m pip install --user pipx python3 -m pipx ensurepath For more details, installation . To add shell completions, see instructions with pipx completions Overview: What is pipx ? pipx is a tool to help you install and run end-user applications written in Python. pipx is not a tool for development or publishing of your code. It's kind of like macOS's brew (if you are familiar with that), but for Python applications. Python and PyPI allow developers to distribute code with \"console script entry points\". These scripts let users call into Python code from the command line, effectively acting like standalone applications. pipx is a tool to install and run any of the thousands of Python applications available on PyPI in a safe, convenient, and reliable way. In a way, it turns Python Package Index (PyPI) into a big app store for Python applications. Not all Python packages have entry points, but many do. pipx enables you to: Safely install packages to isolated environments, while globally exposing their CLI entry points so you can run them from anywhere (see the install command). This guarantees no dependency conflicts and clean uninstalls! Easily list, upgrade, and uninstall packages that were installed with pipx Run the latest version of a Python application in a temporary environment (see the run command) Best of all, pipx runs with regular user permissions, never calling sudo pip install (you aren't doing that, are you? \ud83d\ude04). pipx is similar to JavaScript's npx - which ships with npm, but also allows you to install instead of just run. pipx does not ship with pip but installing it is often an important part of bootstrapping your system. Safely installing to isolated environments You can globally install an application by running pipx install PACKAGE This automatically creates a virtual environment, installs the package, and adds the package's associated applications (entry points) to a location on your PATH . For example, pipx install pycowsay makes the pycowsay command available globally, but sandboxes the pycowsay package in its own virtual environment. pipx never needs to run as sudo to do this. Example: >> pipx install pycowsay installed package pycowsay 2.0.3, Python 3.7.3 These apps are now globally available - pycowsay done! \u2728 \ud83c\udf1f \u2728 >> pipx list venvs are in /home/user/.local/pipx/venvs apps are exposed on your $PATH at /home/user/.local/bin package pycowsay 2.0.3, Python 3.7.3 - pycowsay >> pycowsay mooo ____ < mooo > ==== \\ \\ ^__^ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Running in temporary, sandboxed environments pipx makes running the latest version of a program in a temporary environment as easy as pipx run APP [ARGS...] This will install the package in an isolated, temporary directory and invoke the app. Try it! pipx run pycowsay moo Notice that you don't need to execute any install commands to run the app . Re-running the same app is quick because pipx caches Virtual Environments on a per-app basis. These caches last two days. I find this handy when I want to quickly see the help text of an application, or when I occasionally run an app but don't necessarily want it hanging around on my system. A nice side benefit is that you don't have to remember to upgrade it since pipx run will automatically run a recent version for you. You can run .py files directly, too. pipx run https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py pipx is working! Testimonials \" I'm a big fan of pipx. I think pipx is super cool. \" \u2014 Michael Kennedy , co-host of PythonBytes podcast in episode 139 \" Thanks for improving the workflow that pipsi has covered in the past. Nicely done! \" \u2014 Jannis Leidel , PSF fellow and former pip maintainer \" This tool filled in the gap that was missing with pipenv and Virtual Environmentwrapper. \" \u2014Mason Egger in a blog post Credits pipx was inspired by pipsi and npx . Creator/Maintainer Chad Smith Contributors Bjorn Neergaard Diego Fernandez Jason R. Coombs joshuarli Paul Moore tkossak Tzu-ping Chung Shawn Hensley","title":"Home"},{"location":"#pipx-install-and-run-python-applications-in-isolated-environments","text":"Documentation : https://pipxproject.github.io/pipx/ Source Code : https://github.com/pipxproject/pipx For comparison to other tools including pipsi, see Comparison to Other Tools .","title":"pipx \u2014 Install and Run Python Applications in Isolated Environments"},{"location":"#install-pipx","text":"python3 -m pip install --user pipx python3 -m pipx ensurepath For more details, installation . To add shell completions, see instructions with pipx completions","title":"Install pipx"},{"location":"#overview-what-is-pipx","text":"pipx is a tool to help you install and run end-user applications written in Python. pipx is not a tool for development or publishing of your code. It's kind of like macOS's brew (if you are familiar with that), but for Python applications. Python and PyPI allow developers to distribute code with \"console script entry points\". These scripts let users call into Python code from the command line, effectively acting like standalone applications. pipx is a tool to install and run any of the thousands of Python applications available on PyPI in a safe, convenient, and reliable way. In a way, it turns Python Package Index (PyPI) into a big app store for Python applications. Not all Python packages have entry points, but many do. pipx enables you to: Safely install packages to isolated environments, while globally exposing their CLI entry points so you can run them from anywhere (see the install command). This guarantees no dependency conflicts and clean uninstalls! Easily list, upgrade, and uninstall packages that were installed with pipx Run the latest version of a Python application in a temporary environment (see the run command) Best of all, pipx runs with regular user permissions, never calling sudo pip install (you aren't doing that, are you? \ud83d\ude04). pipx is similar to JavaScript's npx - which ships with npm, but also allows you to install instead of just run. pipx does not ship with pip but installing it is often an important part of bootstrapping your system.","title":"Overview: What is pipx?"},{"location":"#safely-installing-to-isolated-environments","text":"You can globally install an application by running pipx install PACKAGE This automatically creates a virtual environment, installs the package, and adds the package's associated applications (entry points) to a location on your PATH . For example, pipx install pycowsay makes the pycowsay command available globally, but sandboxes the pycowsay package in its own virtual environment. pipx never needs to run as sudo to do this. Example: >> pipx install pycowsay installed package pycowsay 2.0.3, Python 3.7.3 These apps are now globally available - pycowsay done! \u2728 \ud83c\udf1f \u2728 >> pipx list venvs are in /home/user/.local/pipx/venvs apps are exposed on your $PATH at /home/user/.local/bin package pycowsay 2.0.3, Python 3.7.3 - pycowsay >> pycowsay mooo ____ < mooo > ==== \\ \\ ^__^ (oo)\\_______ (__)\\ )\\/\\ ||----w | || ||","title":"Safely installing to isolated environments"},{"location":"#running-in-temporary-sandboxed-environments","text":"pipx makes running the latest version of a program in a temporary environment as easy as pipx run APP [ARGS...] This will install the package in an isolated, temporary directory and invoke the app. Try it! pipx run pycowsay moo Notice that you don't need to execute any install commands to run the app . Re-running the same app is quick because pipx caches Virtual Environments on a per-app basis. These caches last two days. I find this handy when I want to quickly see the help text of an application, or when I occasionally run an app but don't necessarily want it hanging around on my system. A nice side benefit is that you don't have to remember to upgrade it since pipx run will automatically run a recent version for you. You can run .py files directly, too. pipx run https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py pipx is working!","title":"Running in temporary, sandboxed environments"},{"location":"#testimonials","text":"\" I'm a big fan of pipx. I think pipx is super cool. \" \u2014 Michael Kennedy , co-host of PythonBytes podcast in episode 139 \" Thanks for improving the workflow that pipsi has covered in the past. Nicely done! \" \u2014 Jannis Leidel , PSF fellow and former pip maintainer \" This tool filled in the gap that was missing with pipenv and Virtual Environmentwrapper. \" \u2014Mason Egger in a blog post","title":"Testimonials"},{"location":"#credits","text":"pipx was inspired by pipsi and npx . Creator/Maintainer Chad Smith Contributors Bjorn Neergaard Diego Fernandez Jason R. Coombs joshuarli Paul Moore tkossak Tzu-ping Chung Shawn Hensley","title":"Credits"},{"location":"changelog/","text":"0.14.0.0 Speed up operations by using shared venv for pip , setuptools , and wheel . You can see more detail in the 'how pipx works' section of the documentation. (#164, @pfmoore) Breaking change: for the inject command, change --include-binaries to --include-apps Change all terminology from binary to app or application Improve argument parsing for pipx run and pipx runpip 0.13.2.3 Fix regression when installing a package that doesn't have any entry points 0.13.2.2 Remove unneccesary and sometimes incorrect check after pipx inject (#195) Make status text/animation reliably disappear before continuing Update animation symbols 0.13.2.1 Remove virtual environment if installation did not complete. For example, if it was interrupted by ctrl+c or if an exception occurred for any reason. (#193) 0.13.2.0 Add shell autocompletions. Also add pipx completions command to print instructions on how to add pipx completions to your shell. Un-deprecate ensurepath . Use userpath internally instead of instructing users to run the userpath cli command. Improve detection of PIPX_BIN_DIR not being on PATH Improve error message when an existing symlink exists in PIPX_BIN_DIR and points to the wrong location Improve handling of unexpected files in PIPX_HOME (@uranusjr) swap out of order logic in order to correctly recommend --include-deps (@joshuarli) [dev] Migrate from tox to nox 0.13.1.1 Do not raise bare exception if no binaries found (#150) Update pipsi migration script 0.13.1.0 Deprecate ensurepath command. Use userpath append ~/.local/bin Support redirects and proxies when downloading python files (i.e. pipx run http://url/file.py ) Use tox for document generation and CI testing (CI tests are now functional rather than static tests on style and formatting!) Use mkdocs for documentation Change default cache duration for pipx run from 2 to 14 days 0.13.0.1 Fix upgrade-all and reinstall-all regression 0.13.0.0 Add runpip command to run arbitrary pip commands in pipx-managed virtual environments Do not raise error when running pipx install PACKAGE and the package has already been installed by pipx (#125). This is the cause of the major version change from 0.12 to 0.13. Add --skip argument to upgrade-all and reinstall-all commands, to let the user skip particular packages 0.12.3.3 Update logic in determining a package's binaries during installation. This removes spurious binaries from the installation. (#104) Improve compatibility with Debian distributions by using shutil.which instead of distutils.spawn.find_executable (#102) 0.12.3.2 Fix infinite recursion error when installing package such as cloudtoken==0.1.84 (#103) Fix windows type errors (#96, #98) 0.12.3.1 Fix \"WindowsPath is not iterable\" bug 0.12.3.0 Add --include-deps argument to include binaries of dependent packages when installing with pipx. This improves compatibility with packages that depend on other installed packages, such as jupyter . Speed up pipx list output (by running multiple processes in parallel) and by collecting all metadata in a single subprocess call More aggressive cache directory removal when --no-cache is passed to pipx run [dev] Move inline text passed to subprocess calls to their own files to enable autoformating, linting, unit testing 0.12.2.0 Add support for PEP 582's __pypackages__ (experimental). pipx run BINARY will first search in __pypackages__ for binary, then fallback to installing from PyPI. pipx run --pypackages BINARY will raise an error if the binary is not found in __pypackages__ . Fix regression when installing with --editable flag (#93) [dev] improve unit tests 0.12.1.0 Cache and reuse temporary Virtual Environments created with pipx run (#61) Update binary discovery logic to find \"scripts\" like awscli (#91) Forward --pip-args to the pip upgrade command (previously the args were forwarded to install/upgrade commands for packages) (#77) When using environment variable PIPX_HOME, Virtual Environments will now be created at $PIPX_HOME/venvs rather than at $PIPX_HOME . [dev] refactor into multiple files, add more unit tests 0.12.0.4 Fix parsing bug in pipx run 0.12.0.3 list python2 as supported language so that pip installs with python2 will no longer install the pipx on PyPI from the original pipx owner. Running pipx with python2 will fail, but at least it will not be as confusing as running the pipx package from the original owner. 0.12.0.2 forward arguments to run command correctly #90 0.12.0.1 stop using unverified context #89 0.12.0.0 Change installation instructions to use pipx PyPI name Add ensurepath command 0.11.0.2 add version argument parsing back in (fixes regression) 0.11.0.1 add version check, command check, fix printed version update installation instructions 0.11.0.0 Replace pipx BINARY with pipx run BINARY to run a binary in an ephemeral environment. This is a breaking API change so the major version has been incremented. (Issue #69) upgrade pip when upgrading packages (Issue #72) support --system-site-packages flag (Issue #64) 0.10.4.1 Fix version printed when pipx --version is run 0.10.4.0 Add --index-url, --editable, and --pip-args flags Updated README with pipsi migration instructions 0.10.3.0 Display python version in list Do not reinstall package if already installed (added --force flag to override) When upgrading all packages, print message only when package is updated Avoid accidental execution of pipx. main","title":"Changelog"},{"location":"comparisons/","text":"pipx vs pip pip is a general Python package installer. It can be used to install libraries or cli applications with entrypoints. pipx is a specialized package installer. It can only be used to install packages with cli entrypoints. pipx and pip both install packages from PyPI (or locally) pipx relies on pip (and venv) pipx replaces a subset of pip's functionality; it lets you install cli applications but NOT libraries that you import in your code. you can install pipx with pip Example interaction: Install pipx with pip: pip install --user pipx pipx vs poetry and pipenv pipx is used solely for application consumption: you install cli apps with it pipenv and poetry are cli apps used to develop applications and libraries all three tools wrap pip and virtual envrionments for more convenient workflows Example interaction: Install pipenv and poetry with pipx: pipx install poetry Run pipenv or poetry with pipx: pipx run poetry --help pipx vs venv venv is part of Python's standard library in of Python 3.2 and above venv creates \"virtual environments\" with are sandboxed python installations pipx heavily relies on the venv package Example interaction: pipx installs packages to environments created with venv. pipx install black --verbose pipx vs pyenv pyenv manages python versions on your system. It helps you install versions like Python 3.6, 3.7, etc. pipx installs packages in virtual environments and exposes their entrypoints on your PATH Example interaction: Install a Python interpreter with pyenv, then install a package using pipx and that new interperter: pipx install black --python3.7 where python3.7 was installed on the system with pyenv pipx vs pipsi pipx and pipsi both install packages in a similar way pipx is under active development. pipsi is no longer maintained. pipx always makes sure you're using the latest version of pip pipx has the ability to run a app in one line, leaving your system unchanged after it finishes ( pipx run APP ) where pipsi does not pipx has the ability to recursively install binaries from dependent packages pipx adds more useful information to its output pipx has more CLI options such as upgrade-all, reinstall-all, uninstall-all pipx is more modern. It uses Python 3.6+, and the venv package in the Python3 standard library instead of the python 2 package virtualenv . pipx works with Python homebrew installations while pipsi does not (at least on my machine) pipx defaults to less verbose output pipx allows you to see each command it runs by passing the --verbose flag pipx prints emojies \ud83d\ude00 Example interaction: None. Either one or the other should be used. These tools compete for a similar workflow. Migrating to pipx from pipsi After you have installed pipx, run migrate_pipsi_to_pipx.py . Why not do this with your new pipx installation? pipx run https://raw.githubusercontent.com/pipxproject/pipx/master/scripts/migrate_pipsi_to_pipx.py pipx vs brew Both brew and pipx install cli tools They install them from different sources. brew uses a curated repository specifically for brew, and pipx generally uses PyPI. Example interaction: brew can be used to install pipx, but they generally don't interact much. pipx vs npx Both can run cli tools (npx will search for them in node_modules, and if not found run in a temporary environment. pipx run wil search in __pypackages__ and if not found run in a temporary environment) npx works with JavaScript and pipx works with Python Both tools attempt to make runnning executables written in a dynamic language (JS/Python) as easy as possible pipx can also install tools globally; npx cannot Example interaction: None. These tools work for different languages. pipx vs pip-run pip-run is focused on running arbitrary Python code in ephemeral environments while pipx is focused on running Python binaries in ephemeral and non-ephemeral environments . For example these two commands both install poetry to an ephemeral environment and invoke poetry with --help . pipx run poetry --help pip-run poetry -- -m poetry --help Example interaction: None.","title":"Comparison to Other Tools"},{"location":"comparisons/#pipx-vs-pip","text":"pip is a general Python package installer. It can be used to install libraries or cli applications with entrypoints. pipx is a specialized package installer. It can only be used to install packages with cli entrypoints. pipx and pip both install packages from PyPI (or locally) pipx relies on pip (and venv) pipx replaces a subset of pip's functionality; it lets you install cli applications but NOT libraries that you import in your code. you can install pipx with pip Example interaction: Install pipx with pip: pip install --user pipx","title":"pipx vs pip"},{"location":"comparisons/#pipx-vs-poetry-and-pipenv","text":"pipx is used solely for application consumption: you install cli apps with it pipenv and poetry are cli apps used to develop applications and libraries all three tools wrap pip and virtual envrionments for more convenient workflows Example interaction: Install pipenv and poetry with pipx: pipx install poetry Run pipenv or poetry with pipx: pipx run poetry --help","title":"pipx vs poetry and pipenv"},{"location":"comparisons/#pipx-vs-venv","text":"venv is part of Python's standard library in of Python 3.2 and above venv creates \"virtual environments\" with are sandboxed python installations pipx heavily relies on the venv package Example interaction: pipx installs packages to environments created with venv. pipx install black --verbose","title":"pipx vs venv"},{"location":"comparisons/#pipx-vs-pyenv","text":"pyenv manages python versions on your system. It helps you install versions like Python 3.6, 3.7, etc. pipx installs packages in virtual environments and exposes their entrypoints on your PATH Example interaction: Install a Python interpreter with pyenv, then install a package using pipx and that new interperter: pipx install black --python3.7 where python3.7 was installed on the system with pyenv","title":"pipx vs pyenv"},{"location":"comparisons/#pipx-vs-pipsi","text":"pipx and pipsi both install packages in a similar way pipx is under active development. pipsi is no longer maintained. pipx always makes sure you're using the latest version of pip pipx has the ability to run a app in one line, leaving your system unchanged after it finishes ( pipx run APP ) where pipsi does not pipx has the ability to recursively install binaries from dependent packages pipx adds more useful information to its output pipx has more CLI options such as upgrade-all, reinstall-all, uninstall-all pipx is more modern. It uses Python 3.6+, and the venv package in the Python3 standard library instead of the python 2 package virtualenv . pipx works with Python homebrew installations while pipsi does not (at least on my machine) pipx defaults to less verbose output pipx allows you to see each command it runs by passing the --verbose flag pipx prints emojies \ud83d\ude00 Example interaction: None. Either one or the other should be used. These tools compete for a similar workflow.","title":"pipx vs pipsi"},{"location":"comparisons/#migrating-to-pipx-from-pipsi","text":"After you have installed pipx, run migrate_pipsi_to_pipx.py . Why not do this with your new pipx installation? pipx run https://raw.githubusercontent.com/pipxproject/pipx/master/scripts/migrate_pipsi_to_pipx.py","title":"Migrating to pipx from pipsi"},{"location":"comparisons/#pipx-vs-brew","text":"Both brew and pipx install cli tools They install them from different sources. brew uses a curated repository specifically for brew, and pipx generally uses PyPI. Example interaction: brew can be used to install pipx, but they generally don't interact much.","title":"pipx vs brew"},{"location":"comparisons/#pipx-vs-npx","text":"Both can run cli tools (npx will search for them in node_modules, and if not found run in a temporary environment. pipx run wil search in __pypackages__ and if not found run in a temporary environment) npx works with JavaScript and pipx works with Python Both tools attempt to make runnning executables written in a dynamic language (JS/Python) as easy as possible pipx can also install tools globally; npx cannot Example interaction: None. These tools work for different languages.","title":"pipx vs npx"},{"location":"comparisons/#pipx-vs-pip-run","text":"pip-run is focused on running arbitrary Python code in ephemeral environments while pipx is focused on running Python binaries in ephemeral and non-ephemeral environments . For example these two commands both install poetry to an ephemeral environment and invoke poetry with --help . pipx run poetry --help pip-run poetry -- -m poetry --help Example interaction: None.","title":"pipx vs pip-run"},{"location":"contributing/","text":"pipx uses nox for development, continuous integration testing, and automation. Developing pipx pipx uses pipx to develop -- it's recursive! But don't worry, it's not that scary. You'll be up in running in no time. You'll also need make installed. If you don't have make , you can look at pipx's makefile to see the what the make targets correspond to). To develop pipx , first clone the repository. Next, run this command which will use the amazing nox automation framework to set up a virtual environment for each Python version pipx tests against. make develop A virtual environment with required dependencies is now sandboxed and ready to go in .nox/develop-3.6 for Python 3.6. Any changes you make to pipx source code will be reflected immediately in the virtual environment inside .nox/develop-3.6 . So how do you run with that environment? You can either enter the virtual environment with source .nox/develop-3.6/bin/activate and run pipx , or you can run the development pipx directly with .nox/develop-3.6/bin/pipx . Either way, it's running directly from the source code you just cloned and will reflect any changes you make. In one case the command is a bit longer but your environment isn't modified. In the other, you can type pipx but you have to enter the virtual environment. Whichever you prefer will work fine. Go ahead and make your changes now. Testing pipx locally pipx uses the test automation framework nox . Test definitions live in noxfile.py . Run tests by exiting any virtual environment, then running make test Testing pipx on Continuous Intergration builds When you push a new git branch, tests will automatically be run against your code as defined in .travis . Documentation Documentation has a couple steps to it, both of which are automated. The first step is to generate markdown files from templates. See the templates directory. The generated files will have a header at the top indicating they were generated and shouldn't be manually modified. Modify the templates, not the generated markdown files. The second is to compile the markdown files in docs with mkdocs . Both of these steps are done in a single build command: make docs To preview changes, including live reloading, open another terminal and run make watch_docs If you make changes to the pipx cli api or any template, regenerate the .md files in the docs folder: make docs Publishing Doc Changes to GitHub pages make publish_docs Release New pipx Version To create a new release * make sure the changelog is updated * update the version of pipx defined in setup.py Finally, run make publish and don't forget to publish updated documenation.","title":"Contributing"},{"location":"contributing/#developing-pipx","text":"pipx uses pipx to develop -- it's recursive! But don't worry, it's not that scary. You'll be up in running in no time. You'll also need make installed. If you don't have make , you can look at pipx's makefile to see the what the make targets correspond to). To develop pipx , first clone the repository. Next, run this command which will use the amazing nox automation framework to set up a virtual environment for each Python version pipx tests against. make develop A virtual environment with required dependencies is now sandboxed and ready to go in .nox/develop-3.6 for Python 3.6. Any changes you make to pipx source code will be reflected immediately in the virtual environment inside .nox/develop-3.6 . So how do you run with that environment? You can either enter the virtual environment with source .nox/develop-3.6/bin/activate and run pipx , or you can run the development pipx directly with .nox/develop-3.6/bin/pipx . Either way, it's running directly from the source code you just cloned and will reflect any changes you make. In one case the command is a bit longer but your environment isn't modified. In the other, you can type pipx but you have to enter the virtual environment. Whichever you prefer will work fine. Go ahead and make your changes now.","title":"Developing pipx"},{"location":"contributing/#testing-pipx-locally","text":"pipx uses the test automation framework nox . Test definitions live in noxfile.py . Run tests by exiting any virtual environment, then running make test","title":"Testing pipx locally"},{"location":"contributing/#testing-pipx-on-continuous-intergration-builds","text":"When you push a new git branch, tests will automatically be run against your code as defined in .travis .","title":"Testing pipx on Continuous Intergration builds"},{"location":"contributing/#documentation","text":"Documentation has a couple steps to it, both of which are automated. The first step is to generate markdown files from templates. See the templates directory. The generated files will have a header at the top indicating they were generated and shouldn't be manually modified. Modify the templates, not the generated markdown files. The second is to compile the markdown files in docs with mkdocs . Both of these steps are done in a single build command: make docs To preview changes, including live reloading, open another terminal and run make watch_docs If you make changes to the pipx cli api or any template, regenerate the .md files in the docs folder: make docs","title":"Documentation"},{"location":"contributing/#publishing-doc-changes-to-github-pages","text":"make publish_docs","title":"Publishing Doc Changes to GitHub pages"},{"location":"contributing/#release-new-pipx-version","text":"To create a new release * make sure the changelog is updated * update the version of pipx defined in setup.py Finally, run make publish and don't forget to publish updated documenation.","title":"Release New pipx Version"},{"location":"docs/","text":"pipx --help usage: pipx [-h] [--version] {install,inject,upgrade,upgrade-all,uninstall,uninstall-all,reinstall-all,list,run,runpip,ensurepath,completions} ... Install and execute apps from Python packages. Binaries can either be installed globally into isolated Virtual Environments or run directly in an temporary Virtual Environment. Virtual Environment location is ~/.local/pipx/venvs. Symlinks to apps are placed in ~/.local/bin. These locations can be overridden with the environment variables PIPX_HOME and PIPX_BIN_DIR, respectively. (Virtual Environments will be installed to $PIPX_HOME/venvs) optional arguments: -h, --help show this help message and exit --version Print version and exit subcommands: Get help for commands with pipx COMMAND --help {install,inject,upgrade,upgrade-all,uninstall,uninstall-all,reinstall-all,list,run,runpip,ensurepath,completions} install Install a package inject Install packages into an existing Virtual Environment upgrade Upgrade a package upgrade-all Upgrade all packages. Runs `pip install -U <pkgname>` for each package. uninstall Uninstall a package uninstall-all Uninstall all packages reinstall-all Reinstall all packages with a different Python executable list List installed packages run Download the latest version of a package to a temporary virtual environment, then run an app from it. Also compatible with local `__pypackages__` directory (experimental). runpip Run pip in an existing pipx-managed Virtual Environment ensurepath Ensure directory where pipx stores apps is on your PATH environment variable. Note that running this may modify your shell's configuration file(s) such as '~/.bashrc'. completions Print instructions on enabling shell completions for pipx pipx install pipx install --help usage: pipx install [-h] [--spec SPEC] [--include-deps] [--verbose] [--force] [--python PYTHON] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] package The install command is the preferred way to globally install apps from python packages on your system. It creates an isolated virtual environment for the package, then ensures the package's apps are accessible on your $PATH. The result: apps you can run from anywhere, located in packages you can cleanly upgrade or uninstall. Guaranteed to not have dependency version conflicts or interfere with your OS's python packages. 'sudo' is not required to do this. pipx install PACKAGE pipx install --python PYTHON PACKAGE pipx install --spec VCS_URL PACKAGE pipx install --spec ZIP_FILE PACKAGE pipx install --spec TAR_GZ_FILE PACKAGE The argument to `--spec` is passed directly to `pip install`. The default virtual environment location is ~/.local/pipx and can be overridden by setting the environment variable `PIPX_HOME` (Virtual Environments will be installed to `$PIPX_HOME/venvs`). The default app location is ~/.local/bin and can be overridden by setting the environment variable `PIPX_BIN_DIR`. positional arguments: package package name optional arguments: -h, --help show this help message and exit --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --include-deps Include apps of dependent packages --verbose --force Install even when the package has already been installed --python PYTHON The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.3+. --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands pipx run pipx run --help usage: pipx run [-h] [--no-cache] [--pypackages] [--spec SPEC] [--verbose] [--python PYTHON] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] app ... Download the latest version of a package to a temporary virtual environment, then run an app from it. The environment will be cached and re-used for up to 14 days. This means subsequent calls to 'run' for the same package will be faster since they can re-use the cached Virtual Environment. In support of PEP 582 'run' will use apps found in a local __pypackages__ directory, if present. Please note that this behavior is experimental, and is a acts as a companion tool to pythonloc. It may be modified or removed in the future. See https://github.com/cs01/pythonloc. positional arguments: app app/package name appargs arguments passed to the application when it is invoked optional arguments: -h, --help show this help message and exit --no-cache Do not re-use cached virtual environment if it exists --pypackages Require app to be run from local __pypackages__ directory --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --verbose --python PYTHON The Python version to run package's CLI app with. Must be v3.3+. --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands pipx upgrade pipx upgrade --help usage: pipx upgrade [-h] [--spec SPEC] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--verbose] package Upgrade a package in a pipx-managed Virtual Environment by running 'pip install --upgrade PACKAGE' positional arguments: package optional arguments: -h, --help show this help message and exit --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --verbose pipx upgrade-all pipx upgrade-all --help usage: pipx upgrade-all [-h] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--skip SKIP [SKIP ...]] [--verbose] Upgrades all packages within their virtual environments by running 'pip install --upgrade PACKAGE' optional arguments: -h, --help show this help message and exit --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --skip SKIP [SKIP ...] skip these packages --verbose pipx inject pipx inject --help usage: pipx inject [-h] [--include-apps] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--verbose] package dependencies [dependencies ...] Installs packages to an existing pipx-managed virtual environment. positional arguments: package Name of the existing pipx-managed Virtual Environment to inject into dependencies the packages to inject into the Virtual Environment optional arguments: -h, --help show this help message and exit --include-apps Add apps from the injected packages onto your PATH --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --verbose pipx uninstall pipx uninstall --help usage: pipx uninstall [-h] [--verbose] package Uninstalls a pipx-managed Virtual Environment by deleting it and any files that point to its apps. positional arguments: package optional arguments: -h, --help show this help message and exit --verbose pipx uninstall-all pipx uninstall-all --help usage: pipx uninstall-all [-h] [--verbose] Uninstall all pipx-managed packages optional arguments: -h, --help show this help message and exit --verbose pipx reinstall-all pipx reinstall-all --help usage: pipx reinstall-all [-h] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--skip SKIP [SKIP ...]] [--verbose] python Reinstalls all packages using a different version of Python. Packages are uninstalled, then installed with pipx install PACKAGE. This is useful if you upgraded to a new version of Python and want all your packages to use the latest as well. If you originally installed a package from a source other than PyPI, this command may behave in unexpected ways since it will reinstall from PyPI. positional arguments: python optional arguments: -h, --help show this help message and exit --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --skip SKIP [SKIP ...] skip these packages --verbose pipx list pipx list --help usage: pipx list [-h] [--verbose] List packages and apps installed with pipx optional arguments: -h, --help show this help message and exit --verbose pipx runpip pipx runpip --help usage: pipx runpip [-h] [--verbose] package ... Run pip in an existing pipx-managed Virtual Environment positional arguments: package Name of the existing pipx-managed Virtual Environment to run pip in pipargs Arguments to forward to pip command optional arguments: -h, --help show this help message and exit --verbose","title":"Docs"},{"location":"docs/#pipx-install","text":"pipx install --help usage: pipx install [-h] [--spec SPEC] [--include-deps] [--verbose] [--force] [--python PYTHON] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] package The install command is the preferred way to globally install apps from python packages on your system. It creates an isolated virtual environment for the package, then ensures the package's apps are accessible on your $PATH. The result: apps you can run from anywhere, located in packages you can cleanly upgrade or uninstall. Guaranteed to not have dependency version conflicts or interfere with your OS's python packages. 'sudo' is not required to do this. pipx install PACKAGE pipx install --python PYTHON PACKAGE pipx install --spec VCS_URL PACKAGE pipx install --spec ZIP_FILE PACKAGE pipx install --spec TAR_GZ_FILE PACKAGE The argument to `--spec` is passed directly to `pip install`. The default virtual environment location is ~/.local/pipx and can be overridden by setting the environment variable `PIPX_HOME` (Virtual Environments will be installed to `$PIPX_HOME/venvs`). The default app location is ~/.local/bin and can be overridden by setting the environment variable `PIPX_BIN_DIR`. positional arguments: package package name optional arguments: -h, --help show this help message and exit --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --include-deps Include apps of dependent packages --verbose --force Install even when the package has already been installed --python PYTHON The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.3+. --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands","title":"pipx install"},{"location":"docs/#pipx-run","text":"pipx run --help usage: pipx run [-h] [--no-cache] [--pypackages] [--spec SPEC] [--verbose] [--python PYTHON] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] app ... Download the latest version of a package to a temporary virtual environment, then run an app from it. The environment will be cached and re-used for up to 14 days. This means subsequent calls to 'run' for the same package will be faster since they can re-use the cached Virtual Environment. In support of PEP 582 'run' will use apps found in a local __pypackages__ directory, if present. Please note that this behavior is experimental, and is a acts as a companion tool to pythonloc. It may be modified or removed in the future. See https://github.com/cs01/pythonloc. positional arguments: app app/package name appargs arguments passed to the application when it is invoked optional arguments: -h, --help show this help message and exit --no-cache Do not re-use cached virtual environment if it exists --pypackages Require app to be run from local __pypackages__ directory --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --verbose --python PYTHON The Python version to run package's CLI app with. Must be v3.3+. --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands","title":"pipx run"},{"location":"docs/#pipx-upgrade","text":"pipx upgrade --help usage: pipx upgrade [-h] [--spec SPEC] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--verbose] package Upgrade a package in a pipx-managed Virtual Environment by running 'pip install --upgrade PACKAGE' positional arguments: package optional arguments: -h, --help show this help message and exit --spec SPEC The package name or specific installation source passed to pip. Runs `pip install -U SPEC`. For example `--spec mypackage==2.0.0` or `--spec git+https://github.com/user/repo.git@branch` --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --verbose","title":"pipx upgrade"},{"location":"docs/#pipx-upgrade-all","text":"pipx upgrade-all --help usage: pipx upgrade-all [-h] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--skip SKIP [SKIP ...]] [--verbose] Upgrades all packages within their virtual environments by running 'pip install --upgrade PACKAGE' optional arguments: -h, --help show this help message and exit --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --skip SKIP [SKIP ...] skip these packages --verbose","title":"pipx upgrade-all"},{"location":"docs/#pipx-inject","text":"pipx inject --help usage: pipx inject [-h] [--include-apps] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--verbose] package dependencies [dependencies ...] Installs packages to an existing pipx-managed virtual environment. positional arguments: package Name of the existing pipx-managed Virtual Environment to inject into dependencies the packages to inject into the Virtual Environment optional arguments: -h, --help show this help message and exit --include-apps Add apps from the injected packages onto your PATH --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --verbose","title":"pipx inject"},{"location":"docs/#pipx-uninstall","text":"pipx uninstall --help usage: pipx uninstall [-h] [--verbose] package Uninstalls a pipx-managed Virtual Environment by deleting it and any files that point to its apps. positional arguments: package optional arguments: -h, --help show this help message and exit --verbose","title":"pipx uninstall"},{"location":"docs/#pipx-uninstall-all","text":"pipx uninstall-all --help usage: pipx uninstall-all [-h] [--verbose] Uninstall all pipx-managed packages optional arguments: -h, --help show this help message and exit --verbose","title":"pipx uninstall-all"},{"location":"docs/#pipx-reinstall-all","text":"pipx reinstall-all --help usage: pipx reinstall-all [-h] [--include-deps] [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS] [--skip SKIP [SKIP ...]] [--verbose] python Reinstalls all packages using a different version of Python. Packages are uninstalled, then installed with pipx install PACKAGE. This is useful if you upgraded to a new version of Python and want all your packages to use the latest as well. If you originally installed a package from a source other than PyPI, this command may behave in unexpected ways since it will reinstall from PyPI. positional arguments: python optional arguments: -h, --help show this help message and exit --include-deps Include apps of dependent packages --system-site-packages Give the virtual environment access to the system site-packages dir. --index-url INDEX_URL, -i INDEX_URL Base URL of Python Package Index --editable, -e Install a project in editable mode --pip-args PIP_ARGS Arbitrary pip arguments to pass directly to pip install/upgrade commands --skip SKIP [SKIP ...] skip these packages --verbose","title":"pipx reinstall-all"},{"location":"docs/#pipx-list","text":"pipx list --help usage: pipx list [-h] [--verbose] List packages and apps installed with pipx optional arguments: -h, --help show this help message and exit --verbose","title":"pipx list"},{"location":"docs/#pipx-runpip","text":"pipx runpip --help usage: pipx runpip [-h] [--verbose] package ... Run pip in an existing pipx-managed Virtual Environment positional arguments: package Name of the existing pipx-managed Virtual Environment to run pip in pipargs Arguments to forward to pip command optional arguments: -h, --help show this help message and exit --verbose","title":"pipx runpip"},{"location":"examples/","text":"pipx install examples pipx install pycowsay pipx install --python python3.6 pycowsay pipx install --python python3.7 pycowsay pipx install --spec git+https://github.com/ambv/black black pipx --spec git+https://github.com/ambv/black.git@branch-name black pipx --spec git+https://github.com/ambv/black.git@git-hash black pipx install --spec https://github.com/ambv/black/archive/18.9b0.zip black pipx install --spec black[d] black pipx install --include-deps jupyter pipx run examples pipx enables you to test various combinations of Python versions and package versions in ephemeral environments: pipx run BINARY # latest version of binary is run with python3 pipx --spec PACKAGE==2.0.0 run BINARY # specific version of package is run pipx --python 3.4 run BINARY # Installed and invoked with specific Python version pipx --python 3.7 --spec PACKAGE=1.7.3 run BINARY pipx --spec git+https://url.git run BINARY # latest version on master is run pipx --spec git+https://url.git@branch run BINARY pipx --spec git+https://url.git@hash run BINARY pipx run pycowsay moo pipx --version # prints pipx version pipx run pycowsay --version # prints pycowsay version pipx --python pythonX pycowsay pipx --spec pycowsay==2.0 pycowsay --version pipx --spec git+https://github.com/ambv/black.git black pipx --spec git+https://github.com/ambv/black.git@branch-name black pipx --spec git+https://github.com/ambv/black.git@git-hash black pipx --spec https://github.com/ambv/black/archive/18.9b0.zip black --help pipx https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py pipx inject example One use of the inject command is setting up a REPL with some useful extra packages. pipx install ptpython pipx inject ptpython requests pendulum After running the above commands, you will be able to import and use the requests and pendulum packages inside a ptpython repl. pipx list example > pipx list venvs are in /Users/user/.local/pipx/venvs binaries are exposed on your $PATH at /Users/user/.local/bin package black 18.9b0, Python 3.7.0 - black - blackd package pipx 0.10.0, Python 3.7.0 - pipx","title":"Examples"},{"location":"examples/#pipx-install-examples","text":"pipx install pycowsay pipx install --python python3.6 pycowsay pipx install --python python3.7 pycowsay pipx install --spec git+https://github.com/ambv/black black pipx --spec git+https://github.com/ambv/black.git@branch-name black pipx --spec git+https://github.com/ambv/black.git@git-hash black pipx install --spec https://github.com/ambv/black/archive/18.9b0.zip black pipx install --spec black[d] black pipx install --include-deps jupyter","title":"pipx install examples"},{"location":"examples/#pipx-run-examples","text":"pipx enables you to test various combinations of Python versions and package versions in ephemeral environments: pipx run BINARY # latest version of binary is run with python3 pipx --spec PACKAGE==2.0.0 run BINARY # specific version of package is run pipx --python 3.4 run BINARY # Installed and invoked with specific Python version pipx --python 3.7 --spec PACKAGE=1.7.3 run BINARY pipx --spec git+https://url.git run BINARY # latest version on master is run pipx --spec git+https://url.git@branch run BINARY pipx --spec git+https://url.git@hash run BINARY pipx run pycowsay moo pipx --version # prints pipx version pipx run pycowsay --version # prints pycowsay version pipx --python pythonX pycowsay pipx --spec pycowsay==2.0 pycowsay --version pipx --spec git+https://github.com/ambv/black.git black pipx --spec git+https://github.com/ambv/black.git@branch-name black pipx --spec git+https://github.com/ambv/black.git@git-hash black pipx --spec https://github.com/ambv/black/archive/18.9b0.zip black --help pipx https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py","title":"pipx run examples"},{"location":"examples/#pipx-inject-example","text":"One use of the inject command is setting up a REPL with some useful extra packages. pipx install ptpython pipx inject ptpython requests pendulum After running the above commands, you will be able to import and use the requests and pendulum packages inside a ptpython repl.","title":"pipx inject example"},{"location":"examples/#pipx-list-example","text":"> pipx list venvs are in /Users/user/.local/pipx/venvs binaries are exposed on your $PATH at /Users/user/.local/bin package black 18.9b0, Python 3.7.0 - black - blackd package pipx 0.10.0, Python 3.7.0 - pipx","title":"pipx list example"},{"location":"getting-started/","text":"Now that you have pipx installed, you can install a program: pipx install PACKAGE for example pipx install pycowsay You can list programs installed: pipx list Or you can run a program without installing it: pipx run pycowsay moooo! You can view documentation for all commands by running pipx --help .","title":"Getting Started"},{"location":"how-pipx-works/","text":"How it Works When installing a package and its binaries ( pipx install package ) pipx will create directory ~/.local/pipx/venvs/PACKAGE create or re-use a shared virtual environment that contains shared packaging libraries pip , setuptools and wheel in ~/.local/pipx/shared/ ensure all packaging libraries are updated to their latest versions create a Virtual Environment in ~/.local/pipx/venvs/PACKAGE that uses the shared pip mentioned above but otherwise is isolated (pipx uses a .pth file to do this) install the desired package in the Virtual Environment expose binaries at ~/.local/bin that point to new binaries in ~/.local/pipx/venvs/PACKAGE/bin (such as ~/.local/bin/black -> ~/.local/pipx/venvs/black/bin/black ) As long as ~/.local/bin/ is on your PATH, you can now invoke the new binaries globally When running a binary ( pipx run BINARY ), pipx will create or re-use a shared virtual environment that contains shared packaging libraries pip , setuptools and wheel in ~/.local/pipx/shared/ ensure all packaging libraries are updated to their latest versions create a temporary directory (or reuse a cached virtual environment for this package) with a name based on a hash of the attributes that make the run reproducible. This includes things like the package name, spec, python version, and pip arguments. create a Virtual Environment inside it with python -m venv install the desired package in the Virtual Environment invoke the binary These are all things you can do yourself, but pipx automates them for you. If you are curious as to what pipx is doing behind the scenes, you can always pass the --verbose flag to see every single command and argument being run. Developing for pipx If you are a developer and want to be able to run pipx install MY_PACKAGE make sure you include an entry_points section in your setup.py file. setup( # other arguments here... entry_points={ 'console_scripts': [ 'foo = my_package.some_module:main_func', 'bar = other_module:some_func', ], 'gui_scripts': [ 'baz = my_package_gui:start_func', ] } ) In this case main_func and some_func would be available to pipx after installing the above example package. For a real-world example, see pycowsay 's setup.py source code. You can read more about entry points here .","title":"How pipx works"},{"location":"how-pipx-works/#how-it-works","text":"When installing a package and its binaries ( pipx install package ) pipx will create directory ~/.local/pipx/venvs/PACKAGE create or re-use a shared virtual environment that contains shared packaging libraries pip , setuptools and wheel in ~/.local/pipx/shared/ ensure all packaging libraries are updated to their latest versions create a Virtual Environment in ~/.local/pipx/venvs/PACKAGE that uses the shared pip mentioned above but otherwise is isolated (pipx uses a .pth file to do this) install the desired package in the Virtual Environment expose binaries at ~/.local/bin that point to new binaries in ~/.local/pipx/venvs/PACKAGE/bin (such as ~/.local/bin/black -> ~/.local/pipx/venvs/black/bin/black ) As long as ~/.local/bin/ is on your PATH, you can now invoke the new binaries globally When running a binary ( pipx run BINARY ), pipx will create or re-use a shared virtual environment that contains shared packaging libraries pip , setuptools and wheel in ~/.local/pipx/shared/ ensure all packaging libraries are updated to their latest versions create a temporary directory (or reuse a cached virtual environment for this package) with a name based on a hash of the attributes that make the run reproducible. This includes things like the package name, spec, python version, and pip arguments. create a Virtual Environment inside it with python -m venv install the desired package in the Virtual Environment invoke the binary These are all things you can do yourself, but pipx automates them for you. If you are curious as to what pipx is doing behind the scenes, you can always pass the --verbose flag to see every single command and argument being run.","title":"How it Works"},{"location":"how-pipx-works/#developing-for-pipx","text":"If you are a developer and want to be able to run pipx install MY_PACKAGE make sure you include an entry_points section in your setup.py file. setup( # other arguments here... entry_points={ 'console_scripts': [ 'foo = my_package.some_module:main_func', 'bar = other_module:some_func', ], 'gui_scripts': [ 'baz = my_package_gui:start_func', ] } ) In this case main_func and some_func would be available to pipx after installing the above example package. For a real-world example, see pycowsay 's setup.py source code. You can read more about entry points here .","title":"Developing for pipx"},{"location":"installation/","text":"System Requirements python 3.6+ is required to install pipx. pipx can run binaries from packages with Python 3.3+. Don't have Python 3.6 or later? See Python 3 Installation & Setup Guide . You also need to have pip installed on your machine for python3 . Installing it varies from system to system. Consult pip's installation instructions . Installing on Linux works best with a Linux Package Manager . pipx works on macOS, linux, and Windows. Install pipx Assuming you have pip installed for python3, run: python3 -m pip install --user pipx python3 -m pipx ensurepath Upgrade pipx python3 -m pip install -U pipx Installation Options pipx's default binary location is ~/.local/bin . This can be overriden with the environment variable PIPX_BIN_DIR . pipx's default virtual environment location is ~/.local/pipx . This can be overridden with the environment variable PIPX_HOME . Install pipx Development Versions New versions of pipx are published as beta or release candidates. These versions look something like 0.13.0b1 , where b1 signifies the first beta release of version 0.13. These releases can be tested with pip install --user pipx --upgrade --dev","title":"Installation"},{"location":"installation/#system-requirements","text":"python 3.6+ is required to install pipx. pipx can run binaries from packages with Python 3.3+. Don't have Python 3.6 or later? See Python 3 Installation & Setup Guide . You also need to have pip installed on your machine for python3 . Installing it varies from system to system. Consult pip's installation instructions . Installing on Linux works best with a Linux Package Manager . pipx works on macOS, linux, and Windows.","title":"System Requirements"},{"location":"installation/#install-pipx","text":"Assuming you have pip installed for python3, run: python3 -m pip install --user pipx python3 -m pipx ensurepath","title":"Install pipx"},{"location":"installation/#upgrade-pipx","text":"python3 -m pip install -U pipx","title":"Upgrade pipx"},{"location":"installation/#installation-options","text":"pipx's default binary location is ~/.local/bin . This can be overriden with the environment variable PIPX_BIN_DIR . pipx's default virtual environment location is ~/.local/pipx . This can be overridden with the environment variable PIPX_HOME .","title":"Installation Options"},{"location":"installation/#install-pipx-development-versions","text":"New versions of pipx are published as beta or release candidates. These versions look something like 0.13.0b1 , where b1 signifies the first beta release of version 0.13. These releases can be tested with pip install --user pipx --upgrade --dev","title":"Install pipx Development Versions"},{"location":"programs-to-try/","text":"Here are some programs you can try out. If you've never used the program before, make sure you add the --help flag so it doesn't do something you don't expect. If you decide you want to install, you can run pipx install PACKAGE instead. pipx install ansible # IT automation pipx run asciinema # Record and share your terminal sessions, the right way. pipx run black # uncompromising Python code formatter pipx run --spec=babel pybabel --help # internationalizing and localizing Python applications pipx run --spec=chardet chardetect --help # detect file encoding pipx run cookiecutter # creates projects from project templates pipx run create-python-package # easily create and publish new Python packages pipx run flake8 # tool for style guide enforcement pipx run gdbgui # browser-based gdb debugger pipx run hexsticker # create hexagon stickers automatically pipx run ipython # powerful interactive Python shell pipx run jupyter # web-based notebook environment for interactive computing pipx run pipenv # python dependency/environment management pipx run poetry # python dependency/environment/packaging management pipx run pylint # source code analyzer pipx run pyinstaller # bundles a Python application and all its dependencies into a single package pipx run pyxtermjs # fully functional terminal in the browser pipx install shell-functools # Functional programming tools for the shell","title":"Programs to Try"}]}